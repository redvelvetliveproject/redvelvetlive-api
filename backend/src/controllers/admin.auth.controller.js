// ============================================
// üîê RedVelvetLive ‚Äî Controlador de Autenticaci√≥n Admin (PRO FINAL)
// ============================================
//
// Gestiona:
//   ‚úÖ Login del administrador (credenciales .env)
//   ‚úÖ Verificaci√≥n de token JWT activo
//   ‚úÖ Logout seguro
//
// Requiere variables en .env:
//   - ADMIN_EMAIL
//   - ADMIN_SECRET_KEY
//   - JWT_SECRET
//   - SESSION_EXPIRATION_HOURS
// ============================================

import jwt from "jsonwebtoken";

// ==========================
// üîë 1Ô∏è‚É£ LOGIN ADMINISTRATIVO
// ==========================
export async function loginAdmin(req, res) {
  try {
    const { email, key } = req.body;

    // ‚ö†Ô∏è Validaciones b√°sicas
    if (!email || !key) {
      return res.status(400).json({
        success: false,
        message: "Faltan credenciales: email y clave son requeridos.",
      });
    }

    // üß© Comparar con las credenciales del entorno (.env)
    const validEmail = email.trim().toLowerCase() === process.env.ADMIN_EMAIL.toLowerCase();
    const validKey = key === process.env.ADMIN_SECRET_KEY;

    if (!validEmail || !validKey) {
      console.warn(`üö´ Intento de login fallido: ${email}`);
      return res.status(401).json({
        success: false,
        message: "Credenciales inv√°lidas. Acceso denegado.",
      });
    }

    // üß† Generar token JWT
    const expiresIn = (Number(process.env.SESSION_EXPIRATION_HOURS) || 24) * 3600; // segundos
    const tokenPayload = {
      role: "admin",
      email,
      access: "panel",
      iat: Math.floor(Date.now() / 1000),
    };

    const token = jwt.sign(tokenPayload, process.env.JWT_SECRET, { expiresIn });

    // üç™ Configurar cookie HTTP-only segura
    res.cookie("rvl_admin_token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production", // solo HTTPS en producci√≥n
      sameSite: "None",
      maxAge: expiresIn * 1000, // milisegundos
    });

    console.log(`‚úÖ Admin ${email} inici√≥ sesi√≥n correctamente.`);

    return res.status(200).json({
      success: true,
      message: "Inicio de sesi√≥n exitoso",
      token,
      expiresIn,
      admin: {
        email,
        role: "admin",
      },
    });
  } catch (error) {
    console.error("‚ùå Error en loginAdmin:", error);
    res.status(500).json({
      success: false,
      message: "Error interno al iniciar sesi√≥n.",
    });
  }
}

// ==========================
// üß© 2Ô∏è‚É£ VERIFICAR TOKEN ACTIVO
// ==========================
export async function verifyToken(req, res) {
  try {
    // Este punto solo se alcanza si adminAuth() valid√≥ el JWT
    const admin = req.admin;

    if (!admin) {
      return res.status(401).json({
        success: false,
        message: "No hay sesi√≥n activa.",
      });
    }

    return res.status(200).json({
      success: true,
      message: "Token v√°lido.",
      admin,
    });
  } catch (error) {
    console.error("‚ö†Ô∏è Error en verifyToken:", error);
    res.status(500).json({
      success: false,
      message: "Error verificando el token.",
    });
  }
}

// ==========================
// üö™ 3Ô∏è‚É£ LOGOUT ADMINISTRATIVO
// ==========================
export async function logoutAdmin(req, res) {
  try {
    res.clearCookie("rvl_admin_token", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "None",
    });

    console.log("üëã Sesi√≥n administrativa cerrada correctamente.");

    return res.status(200).json({
      success: true,
      message: "Sesi√≥n administrativa cerrada correctamente.",
    });
  } catch (error) {
    console.error("‚ö†Ô∏è Error en logoutAdmin:", error);
    res.status(500).json({
      success: false,
      message: "Error cerrando sesi√≥n.",
    });
  }
}


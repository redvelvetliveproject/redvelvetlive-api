// ============================================
// üíé RedVelvetLive ‚Äî Payments Controller (PRO FINAL)
// ============================================
//
// Controlador principal del m√≥dulo financiero:
//   ‚úÖ Registra y valida tips / retiros en blockchain
//   ‚úÖ Audita transacciones on-chain (BSC, ONECOP, USDT)
//   ‚úÖ Actualiza estados de √≥rdenes (CONFIRMED / FAILED)
//   ‚úÖ Consulta balances y sincroniza m√©tricas de modelos
//
// 100% compatible con MongoDB + Web3.js + BSC Mainnet
// ============================================

import mongoose from "mongoose";
import PaymentOrder from "../models/PaymentOrder.js";
import ModelUser from "../models/ModelUser.js";
import {
  verifyTransaction,
  auditTransaction,
  getTokenBalance,
  fromWei,
} from "../services/web3.utils.js";
import {
  validateObjectId,
  validateWallet,
  validateAmount,
} from "../services/validators.js";

/* ======================================================
   üßæ 1Ô∏è‚É£ Registrar nueva orden de pago (TIP / WITHDRAW)
   ====================================================== */
export async function createPayment(req, res) {
  try {
    const {
      modelId,
      amount,
      currency = "ONECOP",
      destinationWallet,
      txHash = "",
      type = "TIP",
      note = "",
    } = req.body;

    // üîí Validaciones b√°sicas
    if (!validateObjectId(modelId))
      return res
        .status(400)
        .json({ success: false, message: "ID de modelo inv√°lido." });

    if (!validateAmount(amount))
      return res
        .status(400)
        .json({ success: false, message: "Monto inv√°lido o vac√≠o." });

    if (!validateWallet(destinationWallet))
      return res
        .status(400)
        .json({ success: false, message: "Wallet de destino inv√°lida." });

    const model = await ModelUser.findById(modelId);
    if (!model)
      return res
        .status(404)
        .json({ success: false, message: "Modelo no encontrado." });

    // üßæ Crear orden en MongoDB
    const order = new PaymentOrder({
      modelId,
      amount,
      currency: currency.toUpperCase(),
      destinationWallet: destinationWallet.toLowerCase(),
      txHash,
      type: type.toUpperCase(),
      metadata: { note, source: "frontend" },
      status: txHash ? "PROCESSING" : "PENDING",
      audit: { createdBy: req.user?.email || "frontend" },
    });

    await order.save();

    console.log(
      `üßæ Nueva orden registrada ‚Üí ${order.type} ${amount} ${currency} para modelo ${model.name}`
    );

    return res.status(201).json({
      success: true,
      message: "Orden creada correctamente.",
      data: order.toPublicJSON(),
      timestamp: new Date(),
    });
  } catch (err) {
    console.error("‚ùå Error al crear orden:", err);
    return res.status(500).json({
      success: false,
      message: "Error interno al registrar la orden.",
      error: err.message,
    });
  }
}

/* ======================================================
   üîó 2Ô∏è‚É£ Verificar transacci√≥n on-chain (por hash)
   ====================================================== */
export async function verifyPayment(req, res) {
  try {
    const { txHash, orderId } = req.body;

    if (!txHash)
      return res
        .status(400)
        .json({ success: false, message: "Hash de transacci√≥n requerido." });

    // ‚úÖ Verificar en blockchain (BSC)
    const verification = await verifyTransaction(txHash);
    if (!verification?.success)
      return res.status(400).json({
        success: false,
        message: "Transacci√≥n no encontrada o inv√°lida en BSC.",
      });

    // üß© Si se asocia una orden, actualizar estado
    if (orderId && validateObjectId(orderId)) {
      const order = await PaymentOrder.findById(orderId);
      if (order) {
        order.markAsConfirmed(txHash, "auto");
        order.status = "CONFIRMED";
        await order.save();

        // Actualiza m√©tricas de modelo
        await syncModelMetrics(order.modelId);
      }
    }

    return res.status(200).json({
      success: true,
      message: "Transacci√≥n confirmada y sincronizada correctamente.",
      data: verification,
      explorer: `${process.env.BLOCKCHAIN_EXPLORER || "https://bscscan.com"}/tx/${txHash}`,
    });
  } catch (err) {
    console.error("‚ùå Error verificando pago:", err);
    return res.status(500).json({
      success: false,
      message: "Error interno en la verificaci√≥n.",
      error: err.message,
    });
  }
}

/* ======================================================
   üßÆ 3Ô∏è‚É£ Auditor√≠a detallada de transacciones (GET)
   ====================================================== */
export async function auditPayment(req, res) {
  try {
    const { txHash } = req.params;

    if (!txHash)
      return res
        .status(400)
        .json({ success: false, message: "Hash de transacci√≥n requerido." });

    const result = await auditTransaction(txHash);

    if (!result?.success)
      return res
        .status(404)
        .json({ success: false, message: "Transacci√≥n no encontrada." });

    return res.status(200).json({
      success: true,
      message: "Auditor√≠a completada correctamente.",
      data: result,
    });
  } catch (err) {
    console.error("‚ùå Error auditando transacci√≥n:", err);
    return res.status(500).json({
      success: false,
      message: "Error interno al auditar transacci√≥n.",
      error: err.message,
    });
  }
}

/* ======================================================
   üí∞ 4Ô∏è‚É£ Consultar balance on-chain de una wallet
   ====================================================== */
export async function getBalance(req, res) {
  try {
    const { wallet } = req.params;

    if (!validateWallet(wallet))
      return res
        .status(400)
        .json({ success: false, message: "Direcci√≥n de wallet inv√°lida." });

    const [onecopRaw, usdtRaw] = await Promise.all([
      getTokenBalance(wallet, "ONECOP"),
      getTokenBalance(wallet, "USDT"),
    ]);

    const balances = {
      ONECOP: fromWei(onecopRaw),
      USDT: fromWei(usdtRaw),
    };

    return res.status(200).json({
      success: true,
      wallet,
      balances,
      timestamp: new Date(),
    });
  } catch (err) {
    console.error("‚ùå Error obteniendo balance:", err);
    return res.status(500).json({
      success: false,
      message: "Error al obtener balances.",
      error: err.message,
    });
  }
}

/* ======================================================
   ü™ô 5Ô∏è‚É£ Sincronizar m√©tricas de modelo (tips confirmados)
   ====================================================== */
export async function syncModelMetrics(modelId) {
  try {
    if (!validateObjectId(modelId)) return null;

    const confirmedTips = await PaymentOrder.aggregate([
      {
        $match: {
          modelId: new mongoose.Types.ObjectId(modelId),
          status: "CONFIRMED",
          type: "TIP",
        },
      },
      {
        $group: {
          _id: "$modelId",
          totalTips: { $sum: "$amount" },
          count: { $sum: 1 },
        },
      },
    ]);

    if (!confirmedTips.length) return null;

    const { totalTips, count } = confirmedTips[0];

    await ModelUser.findByIdAndUpdate(modelId, {
      $inc: { "stats.tips": count },
      $set: { "stats.totalTipsAmount": totalTips },
    });

    console.log(
      `üìä M√©tricas actualizadas: ${count} tips ‚Üí total ${totalTips} tokens (${modelId})`
    );

    return { totalTips, count };
  } catch (err) {
    console.error("‚ùå Error sincronizando m√©tricas:", err);
    return null;
  }
}
